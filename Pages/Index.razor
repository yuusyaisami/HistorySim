@page "/"
@using HistorySim.Game
@using MessageKindEnum = HistorySim.Game.RogueliteGame.MessageKind
@using ActionTypeEnum = HistorySim.Game.RogueliteGame.ActionType

<div class="game-root">
  <header class="top-bar">
    <div>
      <h1>HistorySim Roguelite Prototype</h1>
      <p class="subtitle">Guide three allies through a turn based adventure. Time the action bar to strike.</p>
    </div>
    <div class="status-pill">
      <span>Phase</span>
      <strong>@DisplayPhase</strong>
    </div>
    <div class="status-pill">
      <span>Level</span>
      <strong>@_game.Level</strong>
    </div>
  </header>

  @if (!string.IsNullOrEmpty(_banner))
  {
    <div class="banner @GetMessageClass(_bannerKind)">
      @_banner
      <button type="button" class="banner-close" @onclick="() => _banner = null" aria-label="dismiss banner">Ã—</button>
    </div>
  }

  <div class="game-body">
    <aside class="sidebar">
      <section>
        <h2>Party</h2>
        <ul class="party-list">
          @foreach (var member in _game.Party)
          {
            <li class="@GetMemberClass(member)">
              <header>
                <strong>@member.Name</strong>
                <span>@member.CurrentHp / @member.MaxHp</span>
              </header>
              <div class="hp-bar">
                <div class="hp-fill" style="width:@(member.CurrentHp * 100 / (double)member.MaxHp)%"></div>
              </div>
            </li>
          }
        </ul>
      </section>

      <section>
        <h2>Relics</h2>
        @if (_game.Relics.Count == 0)
        {
          <p class="muted">None collected.</p>
        }
        else
        {
          <ul class="relic-list">
            @foreach (var relic in _game.Relics)
            {
              <li>
                <strong>@relic.Name</strong>
                <span>@relic.Description</span>
              </li>
            }
          </ul>
        }
      </section>

      @if (_game.LastTurnLog.Count > 0)
      {
        <section>
          <h2>Last turn</h2>
          <ul class="turn-log">
            @foreach (var message in _game.LastTurnLog)
            {
              <li class="@GetMessageClass(message.Kind)">@message.Text</li>
            }
          </ul>
          <button class="link-button" @onclick="ClearTurnLog">Clear</button>
        </section>
      }
    </aside>

    <main class="scene">
      @switch (_game.Phase)
      {
        case RogueliteGame.GamePhase.AwaitingCommand:
          <section class="scene-card intro-card">
            <h2>Start Expedition</h2>
            <p>Each run presents new routes, relics, and elite encounters.</p>
            <button class="primary" @onclick="StartGame">Begin</button>
          </section>
          break;

        case RogueliteGame.GamePhase.SelectingEncounter:
          <section class="scene-card option-card">
            <h2>Select Next Route</h2>
            <p>Choose where the party travels next.</p>
            <div class="option-grid">
              @foreach (var (option, index) in _game.Options.Select((value, idx) => (value, idx)))
              {
                <button class="option-button" @onclick="() => ChooseOption(index)">
                  <span class="option-type">@option.Type</span>
                  <strong>@option.Label</strong>
                </button>
              }
            </div>
          </section>
          break;

        case RogueliteGame.GamePhase.Combat:
          <section class="scene-card combat-card">
            <header class="enemy-header">
              @if (_game.CurrentEncounter is RogueliteGame.EncounterBase.EnemyEncounter encounter)
              {
                <div>
                  <h2>@encounter.Enemy.Name</h2>
                  <p>HP @encounter.Enemy.CurrentHp / @encounter.Enemy.MaxHp</p>
                </div>
              }
            </header>

            @if (_game.CurrentActionBar is { } bar)
            {
              <div class="action-bar">
                @foreach (var track in bar.Tracks)
                {
                  <div class="action-track">
                    <header>
                      <span>@track.Member.Name</span>
                      <span>@track.Member.CurrentHp / @track.Member.MaxHp</span>
                    </header>
                    <div class="track-bar">
                      @foreach (var segment in track.Segments)
                      {
                        <div class="@GetSegmentClass(segment.Type)" style="@GetSegmentStyle(segment)">
                          <span>@segment.Type</span>
                          @if (segment.Stack > 1)
                          {
                            <span class="stack">x@segment.Stack</span>
                          }
                        </div>
                      }
                      <div class="marker" style="@GetMarkerStyle()"></div>
                    </div>
                  </div>
                }
              </div>
            }

            <div class="combat-controls">
              <label>
                <span>Lock position (@_lockSlider.ToString("F0")%)</span>
                <input type="range" min="0" max="100" step="1" @bind="_lockSlider" />
              </label>
              <div class="control-buttons">
                <button class="primary" @onclick="() => LockTurn(false)">Lock at slider</button>
                <button class="secondary" @onclick="() => LockTurn(true)">Lock randomly</button>
              </div>
            </div>
          </section>
          break;

        case RogueliteGame.GamePhase.GameOver:
          <section class="scene-card gameover-card">
            <h2>Expedition Failed</h2>
            <p>The team fell in battle. Gather your strength and try again.</p>
            <button class="primary" @onclick="StartGame">Run it back</button>
          </section>
          break;
      }
    </main>

    <aside class="log-panel">
      <h2>Adventure Log</h2>
      <div class="log-scroll">
        @foreach (var message in _game.Messages)
        {
          <div class="log-entry @GetMessageClass(message.Kind)">@message.Text</div>
        }
      </div>
    </aside>
  </div>
</div>

@code {
  readonly RogueliteGame _game = new();
  double _lockSlider = 50;
  string? _banner;
  MessageKindEnum _bannerKind = MessageKindEnum.Info;

  string DisplayPhase => _game.Phase switch
  {
    RogueliteGame.GamePhase.AwaitingCommand => "Title",
    RogueliteGame.GamePhase.SelectingEncounter => "Route Select",
    RogueliteGame.GamePhase.Combat => "Combat",
    RogueliteGame.GamePhase.GameOver => "Game Over",
    _ => _game.Phase.ToString()
  };

  void StartGame()
  {
    _game.StartNewRun();
    _lockSlider = 50;
    _banner = null;
  }

  void ChooseOption(int index)
  {
    if (_game.TryChooseOption(index, out var message))
    {
      ShowBanner(message, MessageKindEnum.Success);
    }
    else
    {
      ShowBanner(message, MessageKindEnum.Warning);
    }
  }

  void LockTurn(bool random)
  {
    double? position = random ? null : _lockSlider / 100.0;
    if (_game.TryResolveTurn(position, out var turnLog, out var combatComplete))
    {
      if (!double.IsNaN(_game.LastLockPosition))
      {
        _lockSlider = _game.LastLockPosition * 100;
      }

      if (combatComplete)
      {
        ShowBanner("Enemy defeated!", MessageKindEnum.Success);
      }
      else
      {
        _banner = null;
      }
    }
    else
    {
      var feedback = turnLog.FirstOrDefault().Text ?? "Unable to resolve turn.";
      ShowBanner(feedback, MessageKindEnum.Warning);
    }
  }

  void ClearTurnLog()
  {
    _game.ClearLastTurnLog();
  }

  void ShowBanner(string message, MessageKindEnum kind)
  {
    _banner = message;
    _bannerKind = kind;
  }

  string GetMemberClass(RogueliteGame.PartyMember member)
    => member.IsDown ? "member down" : member.CurrentHp < member.MaxHp / 2 ? "member hurt" : "member";

  string GetMessageClass(MessageKindEnum kind)
    => kind switch
    {
      MessageKindEnum.Success => "msg-success",
      MessageKindEnum.Warning => "msg-warning",
      MessageKindEnum.Danger => "msg-danger",
      _ => "msg-info"
    };

  string GetSegmentClass(ActionTypeEnum type)
    => type switch
    {
      ActionTypeEnum.Attack => "segment attack",
      ActionTypeEnum.Skill => "segment skill",
      ActionTypeEnum.Rest => "segment rest",
      _ => "segment"
    };

  string GetSegmentStyle(RogueliteGame.ActionSegment segment)
  {
    var left = segment.Start * 100;
    var width = Math.Max(1.5, (segment.End - segment.Start) * 100);
    return $"left:{left:F2}%;width:{width:F2}%;";
  }

  string GetMarkerStyle()
  {
    if (double.IsNaN(_game.LastLockPosition))
    {
      return "display:none;";
    }

    var left = _game.LastLockPosition * 100;
    return $"left:{left:F2}%;";
  }
}
