@page "/"
@using HistorySim.Game
@inject HttpClient Http

@if (_world is null)
{
  <div class="loading-panel">
    <h1>Generating terrain…</h1>
    <p>Preparing noise maps and climate bands.</p>
  </div>
}
else
{
  var map = _world.Map;
  var current = map[_cursor];

  <div class="viewport" tabindex="0" @onkeydown="HandleKey" @ref="_viewportRef">
    <section class="hud">
      <header>
        <h1>HistorySim Terrain Prototype</h1>
        <small>Seed <strong>@_world.Settings.Seed</strong></small>
      </header>

      <dl class="stats">
        <div>
          <dt>Cursor</dt>
          <dd>@_cursor.X , @_cursor.Y</dd>
        </div>
        <div>
          <dt>Biome</dt>
          <dd>@current.Biome</dd>
        </div>
        <div>
          <dt>Elevation</dt>
          <dd>@current.Elevation.ToString("0.00")</dd>
        </div>
        <div>
          <dt>Temperature</dt>
          <dd>@current.Temperature.ToString("0.00")</dd>
        </div>
        <div>
          <dt>Moisture</dt>
          <dd>@current.Moisture.ToString("0.00")</dd>
        </div>
      </dl>

      <section class="legend">
        <h2>Legend</h2>
        <ul>
          <li><span class="swatch biome-deepocean"></span>Deep ocean</li>
          <li><span class="swatch biome-ocean"></span>Ocean</li>
          <li><span class="swatch biome-coast"></span>Coast</li>
          <li><span class="swatch biome-plains"></span>Plains</li>
          <li><span class="swatch biome-desert"></span>Desert</li>
          <li><span class="swatch biome-jungle"></span>Jungle</li>
          <li><span class="swatch biome-snow"></span>Snow</li>
        </ul>
      </section>

      <footer>
        <p>Controls: WASD / Arrow keys move ・ R regenerate current seed ・ Space random seed</p>
      </footer>
    </section>

    <section class="map" style="@GetGridTemplate(map.Width)">
      @for (var y = 0; y < map.Height; y++)
      {
        for (var x = 0; x < map.Width; x++)
        {
          var tile = map[x, y];
          var sprite = GetTileSprite(tile.Biome);
          <span class="@GetTileClass(tile, x, y)" style="@GetTileStyle(sprite)" title="@GetTileTooltip(tile)"></span>
        }
      }
    </section>
  </div>
}

@code {
  readonly WorldGenerator _generator = new();
  readonly Random _random = new();

  GameWorld? _world;
  TileAtlas _atlas = TileAtlas.Empty;
  GridPosition _cursor;
  ElementReference _viewportRef;
  bool _shouldFocus;

  protected override async Task OnInitializedAsync()
  {
    _atlas = await TileAtlas.LoadAsync(Http, "data/tileset.json");
    GenerateWorld(null);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (_shouldFocus && _world is not null)
    {
      _shouldFocus = false;
      await _viewportRef.FocusAsync();
    }
  }

  void HandleKey(KeyboardEventArgs args)
  {
    if (_world is null)
    {
      return;
    }

    switch (args.Key)
    {
      case "ArrowUp":
      case "w":
      case "W":
        MoveCursor(0, -1);
        break;
      case "ArrowDown":
      case "s":
      case "S":
        MoveCursor(0, 1);
        break;
      case "ArrowLeft":
      case "a":
      case "A":
        MoveCursor(-1, 0);
        break;
      case "ArrowRight":
      case "d":
      case "D":
        MoveCursor(1, 0);
        break;
      case "r":
      case "R":
        GenerateWorld(_world.Settings.Seed);
        break;
      case " ":
        GenerateWorld(null);
        break;
    }
  }

  void MoveCursor(int dx, int dy)
  {
    if (_world is null)
    {
      return;
    }

    var nextX = Math.Clamp(_cursor.X + dx, 0, _world.Map.Width - 1);
    var nextY = Math.Clamp(_cursor.Y + dy, 0, _world.Map.Height - 1);

    if (nextX == _cursor.X && nextY == _cursor.Y)
    {
      return;
    }

    _cursor = new GridPosition(nextX, nextY);
    StateHasChanged();
  }

  void GenerateWorld(int? seed)
  {
    var settings = WorldGenerationSettings.Default with
    {
      Seed = seed ?? _random.Next(),
      Width = 96,
      Height = 54
    };

    _world = _generator.Generate(settings);
    _cursor = new GridPosition(_world.Map.Width / 2, _world.Map.Height / 2);
    _shouldFocus = true;
    StateHasChanged();
  }

  string GetTileClass(WorldTile tile, int x, int y)
  {
    var classes = $"cell biome-{tile.Biome.ToString().ToLowerInvariant()}";
    if (_cursor.X == x && _cursor.Y == y)
    {
      classes += " selected";
    }
    return classes;
  }

  string GetTileStyle(string spritePath)
    => string.IsNullOrEmpty(spritePath) ? string.Empty : $"background-image:url('{spritePath}')";

  string GetGridTemplate(int width)
    => $"grid-template-columns: repeat({width}, var(--cell-size));";

  string GetTileSprite(BiomeType biome)
    => _atlas.GetSprite(biome);

  static string GetTileTooltip(WorldTile tile)
    => $"{tile.Biome} – elev {tile.Elevation:0.00}, temp {tile.Temperature:0.00}, moist {tile.Moisture:0.00}";
}
