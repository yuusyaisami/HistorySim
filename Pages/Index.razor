@page "/"
@using HistorySim.Game

<div class="viewport" tabindex="0" @onkeydown="HandleKey" @ref="_viewportRef">
  <section class="hud">
    <header>
      <h1>HistorySim Terrain Prototype</h1>
      <small>Seed <strong>@_world.Settings.Seed</strong></small>
    </header>

    <dl class="stats">
      <div>
        <dt>Cursor</dt>
        <dd>@_cursor.X , @_cursor.Y</dd>
      </div>
      <div>
        <dt>Biome</dt>
        <dd>@CurrentTile.Biome</dd>
      </div>
      <div>
        <dt>Elevation</dt>
        <dd>@CurrentTile.Elevation.ToString("0.00")</dd>
      </div>
      <div>
        <dt>Temperature</dt>
        <dd>@CurrentTile.Temperature.ToString("0.00")</dd>
      </div>
      <div>
        <dt>Moisture</dt>
        <dd>@CurrentTile.Moisture.ToString("0.00")</dd>
      </div>
    </dl>

    <section class="legend">
      <h2>Legend</h2>
      <ul>
        <li><span class="swatch biome-deepocean"></span>Deep ocean</li>
        <li><span class="swatch biome-ocean"></span>Ocean</li>
        <li><span class="swatch biome-coast"></span>Coast</li>
        <li><span class="swatch biome-plains"></span>Plains</li>
        <li><span class="swatch biome-desert"></span>Desert</li>
        <li><span class="swatch biome-jungle"></span>Jungle</li>
        <li><span class="swatch biome-snow"></span>Snow</li>
      </ul>
    </section>

    <footer>
      <p>
        Controls: WASD / Arrow keys to move ・ R regenerate ・ Space new seed
      </p>
    </footer>
  </section>

  <section class="map" style="@($"grid-template-columns: repeat({_world.Map.Width}, var(--cell-size));")">
    @for (var y = 0; y < _world.Map.Height; y++)
    {
      for (var x = 0; x < _world.Map.Width; x++)
      {
        var tile = _world.Map[x, y];
        <span class="@GetTileClass(tile, x, y)" title="@GetTileTooltip(tile)"></span>
      }
    }
  </section>
</div>

@code {
  readonly WorldGenerator _generator = new();
  readonly Random _random = new();
  GameWorld _world = null!;
  GridPosition _cursor;
  ElementReference _viewportRef;

  WorldTile CurrentTile => _world.Map[_cursor];

  protected override void OnInitialized()
  {
    GenerateWorld(null);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await _viewportRef.FocusAsync();
    }
  }

  void HandleKey(KeyboardEventArgs args)
  {
    switch (args.Key)
    {
      case "ArrowUp":
      case "w":
      case "W":
        MoveCursor(0, -1);
        break;
      case "ArrowDown":
      case "s":
      case "S":
        MoveCursor(0, 1);
        break;
      case "ArrowLeft":
      case "a":
      case "A":
        MoveCursor(-1, 0);
        break;
      case "ArrowRight":
      case "d":
      case "D":
        MoveCursor(1, 0);
        break;
      case "r":
      case "R":
        GenerateWorld(_world.Settings.Seed);
        break;
      case " ":
        GenerateWorld(null);
        break;
    }
  }

  void MoveCursor(int dx, int dy)
  {
    var nextX = Math.Clamp(_cursor.X + dx, 0, _world.Map.Width - 1);
    var nextY = Math.Clamp(_cursor.Y + dy, 0, _world.Map.Height - 1);
    if (nextX == _cursor.X && nextY == _cursor.Y)
    {
      return;
    }
    _cursor = new GridPosition(nextX, nextY);
    StateHasChanged();
  }

  void GenerateWorld(int? seed)
  {
    var settings = WorldGenerationSettings.Default with
    {
      Seed = seed ?? _random.Next(),
      Width = 96,
      Height = 54
    };

    _world = _generator.Generate(settings);
    _cursor = new GridPosition(_world.Map.Width / 2, _world.Map.Height / 2);
    StateHasChanged();
  }

  string GetTileClass(WorldTile tile, int x, int y)
  {
    var classes = $"cell biome-{tile.Biome.ToString().ToLowerInvariant()}";
    if (_cursor.X == x && _cursor.Y == y)
    {
      classes += " selected";
    }
    return classes;
  }

  static string GetTileTooltip(WorldTile tile)
    => $"{tile.Biome} – elev {tile.Elevation:0.00}, temp {tile.Temperature:0.00}, moist {tile.Moisture:0.00}";
}
