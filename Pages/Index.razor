@page "/"

<div style="max-width:900px;margin:24px auto;padding:16px;font:14px/1.5 ui-monospace,Consolas,monospace;">
  <h2>HistorySim Console</h2>
  <div style="background:#080c10;border:1px solid #16202a;border-radius:6px;height:420px;overflow:auto;white-space:pre-wrap;padding:12px;" @ref="_outRef"></div>
  <div style="display:flex;gap:8px;margin-top:8px;">
    <input @bind="_input" @bind:event="oninput" @onkeydown="OnKey" placeholder="help と入力。 tick / auto on / war / reset" style="flex:1;padding:8px 10px;background:#0d141c;color:#cfe3ff;border:1px solid #1f2a36;border-radius:4px;" />
    <button @onclick="Run" style="background:#18222e;color:#cfe3ff;border:1px solid #263443;border-radius:4px;padding:8px 10px;cursor:pointer;">Enter</button>
  </div>
</div>

@code {
  ElementReference _outRef;
  string _input = "";
  Simulation _sim = new();
  System.Timers.Timer? _timer;

  protected override void OnAfterRender(bool firstRender) {
    if (firstRender) {
      Log("HistorySim Console 0.1  —  help でコマンド一覧", "dim");
      Log(_sim.Metrics(), "dim");
    }
  }

  void Append(string html) {
    // 超簡易：ログを innerHTML 連結（Blazor JS interopなしでも可）
    // 実運用では JSRuntimeでスクロール制御してもOK。
    var js = $@"
      const box = document.querySelector('div[style*=""overflow:auto""]');
      box.insertAdjacentHTML('beforeend', `{html.Replace("`","\\`")}`);
      box.scrollTop = box.scrollHeight;";
    _ = Microsoft.JSInterop.JSHost.ImportAsync("x", "./_content/Microsoft.AspNetCore.Components.WebAssembly.Authentication/AuthenticationService.js"); // ダミーimportでJS可動確保
    // ↑上の行は“importを少なくとも一度呼ぶ”ための小手先。不要なら削除可。
  }

  void Log(string msg, string cls="")
    => Append($"<div class=\"{cls}\">{System.Net.WebUtility.HtmlEncode(msg)}</div>");

  void Run() {
    Handle(_input.Trim());
    _input = "";
  }
  void OnKey(KeyboardEventArgs e) { if (e.Key == "Enter") Run(); }

  void Handle(string cmd) {
    if (string.IsNullOrWhiteSpace(cmd)) return;
    Log($"> {cmd}");

    switch (cmd.ToLowerInvariant()) {
      case "help":
        Log(string.Join("\n", new[]{
          "help            - この一覧",
          "tick            - 1ステップ進める",
          "auto on/off     - 自動で進める",
          "war             - 人為的衝突（テスト）",
          "reset           - 初期化"
        }), "dim");
        break;
      case "tick":
        StepOnce(); break;
      case "auto on":
        if (_timer==null) {
          _timer = new System.Timers.Timer(300);
          _timer.Elapsed += (_,__) => InvokeAsync(StepOnce);
          _timer.Start();
        }
        break;
      case "auto off":
        _timer?.Stop(); _timer = null; break;
      case "reset":
        _timer?.Stop(); _timer = null; _sim = new(); _sim.Reset();
        Log("== reset ==", "dim");
        Log(_sim.Metrics(), "dim");
        break;
      case "war":
        _sim.ApplyEvent("人為的衝突", new Delta{ 資源=-0.08, 冗長性=-0.05, 相関=+0.06, 確信=+0.04 }, "ボタンは押されるためにある");
        Log("★ 人為的衝突 — ボタンは押されるためにある");
        Log(_sim.Metrics(), "dim");
        break;
      default:
        Log("未知のコマンドです。help を参照。", "err");
        break;
    }
  }

  void StepOnce() {
    var end = _sim.Tick(out var note);
    if (!string.IsNullOrEmpty(note)) Log($"★ {note}");
    Log(_sim.Metrics(), "dim");
    if (end) {
      Log("== 終焉 ==", "warn");
      _timer?.Stop(); _timer = null;
    }
    StateHasChanged();
  }
}
